이번 주제는 양이 너무많고 복잡해서 쉬운 주제와 어려운 주제로 나뉘어 있다. 역시나 백준을 하면서 본 그래프라는 녀석인데 오늘 배울때까지만해도 이런걸 그래프라고 부르는줄 꿈에도 몰랐당


🖋 26 그래프 (Graphs)

🖊 26.1 그래프 소개

전 세계에서 가장 유용하게 쓰이는데 기본적으로 모든 SNS에서 쓰임

[그래프란?]
Nodes+Connection
유한하고 변할 수 있는 꼭지점이나 노드나 점들의 집합으로 구성된 데이터 구조
꼭지점들의 집합에 순서가 없는 경우 무방향 그래프 순서가 있는 경우에는 유방향 그래프라고 함
트리와 비슷하지만 들어가는점도, 루트도 없음.


🖊 26.2 그래프의 이용

- SNS
- 장소, 지도 길찾기
- 라우팅 알고리즘
- 시각적
- 파일시스템
- 그리고 어디든지!


🖊 26.3 그래프의 유형

[Terms]
1. Vertex(정점) - 노드를 이르는 다른 말
2. Edge(간선) - 노드 사이의 연결
3. Weighted/Unweighted(가중/비가중) - 비가중 - 간선에 부여된 값이 없다. 가중 - 간선에 부여된 일정 값이 존재한다.(ex 거리, 시간)
4. Directed/Undirected(방향/무방향) -  한 정점에서 한 정점까지는 하나의 간선만 존재한다. 무방향에는 양방향연결로 되어있다. 방향에는 간선에 부여되는 방향이 있다.


🖊 26.4 그래프 정렬 : 인접 행렬

연결된 그래프를 행렬로 나타낼 수 있다.
인접 매트릭스 행렬


🖊 26.5 그래프 정렬 : 인접 리스트

정점들이 배열로 숫자를 가지는 방식 - 연결된 노드들의 이름을 숫자로 가짐
만약 숫자가 아니라면 key hash 테이블을 사용하면 됨.
{ 노드 : ["연결된 노드","연결된 노드"] } 형식으로 구성


🖊 26.6 인접 행렬 vs. 리스트의 빅오 (BIG O)

V - 정점의 개수
E - 간선의 개수

[인접 리스트]
간선이 많지 않고 퍼져있는 그래프에 대해 인접행렬보다 더적은 공간 차지 ⭐️
모든 간선을 순회하는 것이 더 빠르다 ⭐️
특정 간선이 존재하는 것을 확인하려면 느리다

[인접 매트릭스(행렬)]
인접 행렬은 V가 정점의 숫자일때 V제곱의 공간을 차지
인접 행렬은 간선을 확인하고 싶으면 모든 간선에 대해 루프를 돌아야함
특정 간선이 있는지 찾는것이 매우 쉽다 ⭐️

결론적으로 차지하는 공간때문에 인접 리스트를 위주로 학습을 진행


🖊 26.7,8 점(vertex) 추가에 대한 소개, 솔루션

[의사 코드]
1. addVertex라는 이름의 메소드를 만듦. 정점의 이름을 입력하도록
2. 정점의 이름을 인접 리스트의 키로 입력, 값은 빈 배열로 정함


🖊 26.9,10 선(edge) 추가에 대한 소개, 솔루션

[의사 코드]
1. 실제로 간선을 추가할 때는 두 개의 도시, 즉 두개의 정점을 명시해야함.
2. adjacencyList에서 vertex1의 키를 찾아서 vertex2를 그 배열에 넣어줘야함
3. 그리고 나서 vertex2에도 똑같이 진행해줌.
4. 우선 에러를 제외하고 처리를 진행하기.


🖊 26.11,12 선(edge) 제거에 대한 소개, 솔루션

[의사 코드]
1. 메소드를 만들어서 두 정점을 입력하도록 함
2. 정점 1에 있는 키에 대해 정점 2를 제외한 배열을 재분배함
3. 정점 2에도 동일하게 진행
4. 이번에도 에러 제외하고 처리하기


🖊 26.13,14  점(vertex) 제거에 대한 소개, 솔루션
￼
[의사 코드]
1. 제거할 정점을 받는 메소드를 정의
2. 다른 정점이 있다면 해당 정점을 확인하기위해 루프를 돌고 만약 그것들이 있다면 전부 삭제해준다.
3. 루프안에서 미리 정의한 removeEdge함수를 호출해서 제거해준다.
4. 마지막으로 키를 제거해준다.


📍P.S.
막상 공부해보니 양이 그렇게 많지도 않고 난이도가 어려운것 같지는 않은데, 강사님께서 생략을 점점하시는것 같다. 그만큼 내 실력도 키워야하는데 아직 그만큼 따라가지는 못하는것 같애.. 퓨


🏷 Tags
#유데미 #유데미코리아 #스타트위드유데미 #스터디윗미 #코딩공부 #코딩 #유데미강의 #알고리즘 #자바스크립트 #개발자취업 #startwithudemy

