오늘부터 #스타트위드유데미 를 시작으로 이 강의를 듣게 되었다. 최근 backjoon을 통해 다양한 알고리즘 문제를 풀고 있었는데, 문제의 난이도가 점점 올라갈수록 '알고리즘 공부가 필요할것 같다'라고 생각한 타이밍에 운 좋게 이강의를 수강할 수 있어서 기분이 좋다. 🥰

오늘부터 매일 공부한 사진과 공부 내용을 정리해서 업로드한다!


📖 공부한 내용 

빅 오 표기법(Big O Notation)[빅 오라고 적었지만, 아무래도 대문자 O를 말하는 듯 하다]

🖊 2.1 빅오 소개

빅 오 표기법이란 다양한 문제 해결방법중에 어떤것이 좋은지 비교하고 성능을 평가하는 것을 의미한다.
코드를 분류하거나 비교할 수 있는 시스템과 같은것이라 말할 수 있다.
[사실 최고의 해결방법은 생각이 나는 대로 프로그래밍을 먼저 만드는 것이긴 하지만, 프로그램이 커질수록 이러한 효율 계산이 필요하다.]

🖊 2.2 코드 시간재기

그렇다면 더 나은것, 즉 효율이 좋다는 것은 무엇을 의미할까?

 - 속도가 빠른 것?
 - 메모리를 덜 사용하는 것?
 - 나중에 읽기 좋은 코드인 것?
 
우선 처음에 말한 빠른것인지 찾으려면 timing function을 활용해 그 시간을 잴 수 있다.

하지만 해당 계산과 함수를 통해 시간을 비교한다면 아래와 같은 문제가 발생할 수 있다.

1. 기기마다 다른 방식으로 시간을 기록하기 때문에 각 방법에 따라 차이가 있을 수 있음
2. 같은 기기지만 다른 시간을 기록할 수 있음
3. 너무 짧은 시간안에 사건이 처리되서 속도 측정 정확도가 부족할 수 있음
4. 혹은 너무 오래 걸릴때 비효율적임 언제 다 검사하고 있음?

🖊 2.3 연산 숫자 세기

그래서 시간을 재기보다는 코드가 실행될때 컴퓨터가 처리해야하는 연산횟수를 계산해서 이 문제를 해결해야한다.
왜냐하면 시간은 위의 이유들로 바뀔 수있으나, 연산 횟수는 바뀌지 않으니깐!

그리고 구체적인 숫자(계산 횟수)를 계산하는게 아니라 전체적인 추세를 보는게 중요하다.

🖊 2.4 시간 복잡도 시각화하기

걸리는 시간(계산 횟수)의 그래프를 시각화해서 어떻게 될지 흐름을 판단한다.

🖊 2.5 빅오에 대한 공식소개

입력된 내용이 늘어날수록 알고리즘에 실행 시간이 어떻게 변하는지 설명하는 공식적인 방식을 빅 오 라고 다시 정의한다.
위예서 계속 말했던 것 처럼 정확한 계산보다는 전반적인 추세가 중요

🖊 2.6 빅오 표현식의 단순화

단순화의 규칙

1. 산수는 상수다.
2. 변수 배정도 상수다.
3. 인덱스를 사용해서 배열찾던 모든 배열은 같은시간걸리고 그것도 상수다.
4. 루프가 있으면, 루프처리할때 잘 확인해서 곱인지 합인지 구한다.

🖊 2.7 공간 복잡도

지금까지는 연산횟수 즉 시간에 관한 내용을 알아봤다면, 위의 효율성에서 말한 메모리 측면에서 볼때,
입력이 커질수록 얼마나 많은 공간(메모리)를 차지하는지 계산해서 효율성을 따져볼 수 도 있다.

🖊 2.8 로그와 섹션요약

알고리즘들은 시간에 따른것도있고 효율에 따르는것도 있고 재귀라는 것도 있다. -> 아직 안배운 개념
이 부분에서 로그를 사용하게 될 것이다.

결국 중요한것은 정리 그래프를 이해하는 것이다.


🧢 Recap
1. 알고리즘의 효율성을 나타내기 위해서는 Big O 표기법을 사용한다.
2. 입력의 크기가 늘어날수록 추세가 어떤지 알아보는 것이며,
3. 빅 오는 시간복잡 혹은 공간복잡도에 관련한 추세를 알아보는 것이다.

4. 계속말했듯 빅 오는 하드웨어의 영향을 받지 않기 때문에 정확도 보다는 추세가 중요하며,
5. 세상 모든곳에서 사용될 수 있는 개념이다.


📍P.S.
마지막에 있는 문제는 공간복잡도 퀴즈에서 유일하게 틀린 문제인데, 단순하게 loop안에 loop가 있어서 공간 복잡도가 n^2라고 생각했었다.
공간 복잡도가 정확히 무엇을 의미하는지 한번 더 생각해봐야겠다.


🏷 Tags
#유데미 #유데미코리아 #스타트위드유데미 #스터디윗미 #코딩공부 #코딩 #유데미강의 #알고리즘 #자바스크립트 #개발자취업