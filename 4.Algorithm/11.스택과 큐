재귀함수를 배울때 한번 나왔던 주제인데, 이번에는 인스턴스와 클래스를 활용해 이를 구현했다. 최근 재귀함수로 문제를 많이 풀었는데 이번에 배운 내용을 활용해서 새롭게 문제를 풀 수도 있을 것 같다.


🖋 21 스택(Stacks) + 큐(Queues)

🖊 21.1 스택(Stack) 소개

서로 연결된 두개의 자료구조를 다룸 간단한 내용임
스택은 후입선출 원칙을 따르는 데이터들의 모둠이다 - LIFO

가장 먼저 추가한 것이 제일 나중에 제거된다.

재귀를 다루는 단원에서 호출 스택에서 배운 내용이다.

[활용도]
1. 함수 호출을 다루는데서 사용됨 - 많은 프로그램에서 사용됨
2. undo/redo와 같은 기능에서 사용이 많이 됨
3. 인터넷의 방문기록을 보여주는 기능에서 사용됨


🖊 21.2 배열로 스택 만들기

push&pop
unshift & shift


🖊 21.3 스크래치로 자신만의 스택 작성하기

스택 클래스로 직접 구현하기 - 단일 연결 리스트의 방식을 따른다

<스택에서는 push 와 pop이 상수값의 시간복잡도를 가져야함.>


그래서 기존에 사용했던 단방향의 연결리스트를 그대로 사용하지 않음

[의사 코드 - push]
1. push라는 이름의 함수를 정의함. 값 하나는 입력하는 함수
2. 그 값으로 새로운 노드를 만듦
3. 스택에 노드가 하나도 없을 경우, 새로운 노드가 first이자 last가 되도록
4. 노드가 하나라도 있을 경우 현재 first를 저장하는 변수를 만들고, first가 새로운 노드가 되도록 설정,
5. 그리고 나서 이것들을 연결
6. 노드의 next가 아까 만들어뒀던 변수가 되도록 한 다음
7. 사이즈를 1키워줌

[의사 코드 - pop]
1. 스텍에 노드가 없다면 null return
2. 그렇지 않다면 first 프로퍼티를 취해서 변수에 저장하고 가장 마지막에 출력해준다.
3. 만약 노드가 하나밖에 없다면 first와 last프로퍼티를 null로 설정
4. 이제 last와 first가 같으면 null로 설정
5. 노드가 하나보다 많은 경우에는 first 프로퍼티를 다음 first의 next요소로 설정
6. 사이즈 -1
7. 리턴 노드

원리적으로는 계속 앞에 값을 추가하고 앞에 값을 빼는것과 같다.


🖊 21.4 스택의 빅오 (BIG O)

삽입 - O(1) ⭐️
제거 - O(1) ⭐️
검사 - O(N)
접근 - O(N)

삽입과 제거는 맨 앞에서 진행되기 때문에 전체 스택을 배회할 필요가 없어서 상수 시간이 나옴

🧢 Recap
1. 스택은 후입선출의 특성을 가지는 데이터 구조다
2. 마지막으로 들어온 값은 언제가 가장 먼저 나가게 됨.
3. 실행취소 다시 기능실행과 같은 기능 구현시 사용
4. 자바스크립트의 내장된 데이터 구조는 아니다

배열을 사용해서 코딩을 해도 괜찮지만, 간단한 구조기 때문에 어느 방법을 사용해도 괜찮다.


🖊 21.5 큐(Queue) 소개

스택과 같이 데이터 구조로 써 추가와 제거를 하는것이 다인 구조임
하지만 순서가 선입선출이다 FIFO

줄을 기다린다거나 대부분의 일에서 일어난다.
컴퓨터가 굉장히 익숙하게 하는 일이다. - 대기순번
백그라운드 작업에서 다운로드하는것, 업로딩 하는것, 프린트 대기열 등


🖊 21.6 배열을 사용해서 큐 만들기

push & shift
unshift & pop


🖊 21.7 스크래치로 자신만의 큐 작성하기

큐를 이용할때 tail에서 제거하는건 전체 리스트를 순환해야해서 오래걸린다.
그래서 앞에 가장오래된것이 오도록하고 앞의것부터 제거하도록 한다.

enquere -> 맨뒤에추가
dequere -> 맨 앞의것을 제거

[의사 코드 - enqueue]
1. 값을 받는 새로운 함수 정의
2. 입력된 값을 활용해서 노드를 새로 만듦
3. 만약 노드가 없다면 새로운 노드를 first와 last로 지정
4. 그렇지않다면 last의 next프로퍼티가 새로운 노드가 되도록 하고 last포인터를 맨 끝의 새로운 노드로 이동
5. 사이즈를 1증가
6. 리턴

[의사 코드 - dequeue]
	위의 pop과 완전 동일한 구조


🖊 21.8 큐의 빅오 (BIG O)

삽입 - O(1) ⭐️
제거 - O(1) ⭐️
검사 - O(N)
접근 - O(N)

큐에서 검사와 접근은 실제로 사용하지 않음
enqueue 와 dequeue만 필요할뿐

🧢 Recap
1. 선입선출의 방식이다 FIFO - 스택과 반대
2. 업무를 처리할때 유용하며 앞으로 볼 복잡한 데이터 구조에서 많이 사용을 하게 된다.
3. 삽입과 제거는 상수값의 시간을 가져야한다.



📍P.S.
단방향 자료 구조를 알고 있으면 비교적 이해하기 쉬운 내용의 파트였다. 다만 이제는 이런것들을 배워서 어떻게 써야할지 모르겠는게 문제점이다.
수업이 끝나면 백준과 함께 유데미 강의들을 복습을 해야할 것 같다.


🏷 Tags
#유데미 #유데미코리아 #스타트위드유데미 #스터디윗미 #코딩공부 #코딩 #유데미강의 #알고리즘 #자바스크립트 #개발자취업 #startwithudemy
