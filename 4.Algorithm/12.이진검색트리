오늘은 트리의 나머지 부분을 수강한다. 각 트리를 어떤 방식을 통해 검색하고, 모든 요소를 도출할수 있을지에 대한 고민을 하는 섹션이다.


🖋 23 이진 검색 트리


🖊 23.1 트리 순회 소개

기본적으로 어떤 트리에서도 사용이 가능하다.(이진, 삼진…)
재귀를 많이 사용하는 섹션이다.


🖊 23.2,3 너비 우선 탐색 소개,솔루션

트리를 순회하는 전략중 첫번째 - BFS
같은 레벨에 있는 모든 노드를 거쳐야함
자식 노드를 보기 전에 형제 노드를 다 보는것

[의사 코드] - Iteratively(반복)
1. 큐 클래스를 만들어서(리스트나 배열을 활용) push랑 shift제거를 활용해서 선입선출로 만들어줌.
2. 우선 두개의 변수를 만들고 큐를 만들어서 요소를 추적하고 그 데이터 리스트들을 만들어서 맨 마지막에 출력
3. 루트를 가지고 큐에 넣는다.
4. 큐에 무언가가 있다면 루프를 돌린다.
	- 큐에서 dequeue를 한다. 배열을 사용하는 경우라면 shift를 사용해서 배열의 맨 앞을 제거한다 - 그 노드를 리스트에 추가한다.
	- 그리고 노드에 왼쪽 값이 있는지 확인하고 있다면 큐에 넣어주고
	- 그리고 노드에 오른쪽 값이 있는지 확인하고 있다면 큐에 넣어준다.
5. 모든 저장한 값을 저장한 변수를 출력


🖊 23.4,5 깊이 우선 탐색 소개, 솔루션 – 전위 순회(PreOrder)

모드 노드를 방문하거나 순회할때 형제 노드로 넘어가기 전에 수직으로 트리의 끝까지 내려감
세 가지동작으로 나뉨
1)노드를 방문하고 
2)왼쪽을 본 다음
3)오른쪽을 보는것

[의사 코드] - Recursively(순환형)
1. 우리가 방문했던 것들을 저장하는 변수를 만듦
2. current라는 변수 만들고 거기에 트리의 루트를 저장해줌
3. 노드를 받는 두번째 헬퍼 함수를 만듦
	- 노드의 값을 넣어서 변수를 저장하도록 push ⭐️
	- 그리고 노드에 왼쪽 값이 있는지 확인하고 있다면 재귀방식으로 헬퍼함수 다시 호출
	- 그리고 노드에 오른쪽 값이 있는지 확인하고 있다면 재귀방식으로 헬퍼함수 다시 호출
4. 헬퍼 함수를 current 변수에 대해 호출해준다.
5. 가장 마지막에서 우리가 방문했던 값을 가진 배열이나 리스트를 출력


🖊 23.6,7 깊이 우선 탐색 소개, 솔루션 – 후위 순회(PostOrder)

왼쪽끝을 확인하고 오른쪽끝을 확인하고 순회를 돈다.
루트가 가장 마지막에 방문하는 노드가 된다.

[의사 코드]
PreOrder의 코드를 약간만 변경시킴

	- 만약 노드의 왼쪽에 값이 있다면 그값으로 함수를 호출
	- 만약 노드의 오른쪽에 값이 있다면 그값으로 함수를 호출
	- 반문한 값들을 저장하는 변수에 push ⭐️
	- 마지막으로 current에 대해 헬퍼 함수 호출


🖊 23.8,9 깊이 우선 탐색 소개, 솔루션 – 정위 순회(InOrder)

[의사 코드]
코드를 약간만 변경시킴

	- 만약 노드의 왼쪽에 값이 있다면 그값으로 함수를 호출
	- 반문한 값들을 저장하는 변수에 push ⭐️
	- 만약 노드의 오른쪽에 값이 있다면 그값으로 함수를 호출

	- 마지막으로 current에 대해 헬퍼 함수 호출


🖊 23.10 너비 우선 탐색과 깊이 우선 탐색은 언제 사용되는가?

너비와 깊이

시간복잡도는 같다.(모든 노드를 한번씩 방문하니까)
공간복잡도가 얼마나 복잡한지 비교해야한다.


깊이보다 너비가 넓은 경우 - 깊이 우선 탐색
너비보다 깊이가 더 큰 경우 - 넓이 우선 탐색

[전위, 후위, 정위]

[정위]
이진 탐색트리라면
정위의 경우 나오는 데이터들이 오름차순이 되도록 만들 수 있다.

[전위]
트리를 복사하거나 평탄화해서 저장하는경우
파일이나 데이터베이스같은 곳에 저장을 했다가 나중에 연쇄 구조로 만들때 도움

하지만 이것들은 코드 한줄만 위치 바꿔주면 되기때문에 가장 중요한 것은 깊이인지 넓이인지다


🧢 Recap
1. 트리들은 비선형 데이터 구조로 노드로 구성되어있다.
2. 이진 트리는 아무런 종류의 값을 가질 수 있지만 각 노드의 최대는 2개
3. 이진 탐색트리는 이진트리의 특별한 경우다. 특별한 조건[순서, 정렬, 비교 가능한 데이터 구성]을 만족시켜야한다. 
4. BFS & DFS를 활용해 트리를 탐색하거나 순회할 수 있다.


📍P.S.
트리까지 끝내고 나니 자료구조가 이제 어떤식으로 흘러가는지 감이 잡혔다.
처음 class와 instance를 만들때만 해도 이게 내가 알던게 맞나 하는 생각이 있었는데, 지금은 수강이 편해진 상태다.
힘내서 나머지도 다들어야지.


🏷 Tags
#유데미 #유데미코리아 #스타트위드유데미 #스터디윗미 #코딩공부 #코딩 #유데미강의 #알고리즘 #자바스크립트 #개발자취업 #startwithudemy



