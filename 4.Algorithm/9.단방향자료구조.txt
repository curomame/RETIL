이번 섹션과 다음 섹션은 양이 많아서 두 개로 나눠서 게시물을 업로드한다. 자료구조의 첫번째 내용이며, 이번강의부터 완전 새로운 내용에 들어가는 것이다.


🖋 19 단일 연결 리스트


🖊 19.1 단일 연결 리스트 소개

단방향의 연결리스트

[단방향 연결 리스트란?]
데이터 엘리먼트를 가리키는 익덱스 없이 그냥 다수의 데이터 엘리먼트들로 구성
각각의 엘리먼트를 노드로 일컫음 - 문자열 혹은 수와같은 데이터를 저장
노드가 아무것도 없다면 null

[필요한 인자들]
head - 연결 리스트의 시작 노드
end - 연결 리스트의 마지막 노드
length - 연결 리스트의 길이

연결 리스트를 사용할경우 새로운 항목을 삽입하거나 제거할때 유용[인덱스 없으니까]
특히 긴 데이터 세트나 많은 정보에 이용할 경우 유용


🖊 19.2 코드 스타터와 push 메소드 소개

연결리스트는 단지 노드들로 구성되어있음.
노드는 단일 데이터 항목을 저장하고 이어서 호출될 다음 노드들에 대한 참조정보인 next를 저장한다

[의사코드]
1. 함수는 값을 받아야한다.
2. 주어진 값을 받아들인 후 그것을 이용해서 새로운 노드를 생성한다.
3. 만약 헤드가 없다면 리스트가 비어있으니, 헤드와 테일을 바로 설정해준다.
4. 만약 비어있지 않다면 마지막 노드의 next를 새롭게 생성된 노드를 가리키게 하고 테일이 새롭게 생성된 노드를 가리킨다.
5. 길이를 하나씩 더해준다.


🖊 19.3 단일 연결 리스트 : push 메소드 솔루션

앞서 배운 자료 구조 소개 파트의 this와 인스턴스들을 활용해서 코드를 짰다.


🖊 19.4 단일 연결 리스트 : pop 메소드 소개

pop - 리스트의 맨 마지막에서 노드를 제거함
일방향에서는 처음부터 세서 제거해야한다. - this.next = null

[의사코드]
1. pop이라는 함수 정의하고 어떤 변수나 데이터도 인자로 받아 들일 필요 없음
2. 리스트가 비어있는지 확인해야함
3. 테일에 이를때 까지 계속 따라가는 동시에 이전 노드가 무엇인지 계속 추적해야함
4. 마지막에서 두번째 노드의 next를 Null로 설정했으며, tail값을 마지막에서 두번째 노드로 업데이트
5. 길이를 하나 감소시킨다음 방금 제거한 노드를 반환
6. 제거된 변수를 별도로 저장하고 있어야 할 수 있음


🖊 19.5 단일 연결 리스트 : pop 메소드 솔루션

동일하게 진행하였고, pop이 메소드들 중에서 조금 복잡하다고 함


🖊 19.6 단일 연결 리스트 : shift 메소드 소개

연결 리스트의 앞의 것을 제거함
현재 헤드가 가리키고 있는 노드를 제거한 후 헤드를 헤드가 가리키고 있던 리스트의 두번째로 변경하는것

[의사코드]
1. 노드가 없을 경우 "undefince"을 반환,
2. 노드가 존재할경우 현재의 헤드 속성을 변수에 저장하고, 현재 헤드의 next 노드를 가리키도록 헤드 속성을 업데이트
3. 마지막으로 리스트의 길이를 1만큼 감소시키고
4. 제거된 노드를 리턴


🖊 19.7 단일 연결 리스트 : shift 메소드 솔루션

쉽게 구현완료했음.


🖊 19.8 단일 연결 리스트 : unshift 메소드 소개

노드 리스트를 맨 앞에 추가하는것

[의사코드]
1. 값을 인자로 하는 함수 정의
2. 새로운 노드를 생성한다음
3. 헤드가 있는지 체크해서 헤드와 테일 모두 새로운 노드를 가르키도록
4. 혹은 노드가 있을 경우 새롭게 생성된 노드의 next를 현재 헤드값으로 설정
5. 헤드가 새롭게 생성된 노드를 가르키도록 한 다음
6. 리스트길이 1증가
7. 리턴


🖊 19.9 단일 연결 리스트 : unshift 메소드 솔루션

이 또한 shift와 거의 비슷해서 동일하게 진행함

단방향 데이터 구조의 나머지 부분 수강완료! 자료 구조라는것을 세상 처음 들어봐서 어렵긴했는데 뭔가 머리로는 이해가 가면서도 막상 내가 구현하려고 하면 어려운것같다. 강의 정리 후 복습이 굉장히 필요하다는 생각이 든다.
이번 강의는 대부분 의사코드를 주고 해당 코드를 실현시키는 위주로 흘러가서 강의를 그냥 듣기보다는 코드를 치는 경우가 많았다.


🖊 19.10 단일 연결 리스트 : get 메소드 소개
🖊 19.11 단일 연결 리스트 : get 메소드 솔루션

인덱스 혹은 위치를 의미하는 숫자를 인자로 받아서 주어진 위치에 있는 노드를 반환하는 메소드 (0-> 헤드)
주어진 수를 따라간 다음 해당 위치 노드를 반환하는것이 중요 => 즉각적으로 해당 값을 반환하지는 못함[어레이에 비해 효과적이지 못함.]

[의사코드]
1. 입력된 숫자인 인덱스를 인자로 받음
2. 인덱스 범위에 따라 엣지 케이스 있을 수 있음(인덱스가 음수이거나 리스트 길이보다 같거나 클 경우 동작할 수 없음 -> null )
3. 루프를 통해 인덱스가 지정하는 위치에 이를 반복해서 이동한 다음 counter변수를 사용해서 루프 내부에서 .next를 반복함 이동할때마다 counter 1증가


🖊 19.12 단일 연결 리스트 : set 메소드 소개
🖊 19.13 단일 연결 리스트 : set 메소드 솔루션

set - 위치 혹은 인덱스와 해당 인덱스에 위치한 노드를 업데이트할 값 등 두개의 인자를 받아들임
즉 해당 인덱스를 뒤의 내용으로 바꾸라느 말임

[의사 코드]
1. 업데이트 할 값과 위치를 알려주는 인덱스를 인자로 받아들이는 펑션을 정의(index.val)
2. 이전에 정의한 get()을 활용해서 해당 내용을 만듦
3. 노드를 찾았다면 노드 값을 인자로 받아들인 값으로 업데이트 하고 true를 반환


🖊 19.14 단일 연결 리스트 : insert 메소드 소개
🖊 19.15 단일 연결 리스트 : insert 메소드 솔루션

삽입은 두개의 인자를 받아들인것처럼 index와 val을 받아들임
주어진 노드를 위치에 새롭게 삽입함.

[의사코드]
1. 함수를 정의하고 만약 인덱스가 0보다 작거나 길이보다 크다면 false반환
2. 만약 길이와 같으면 마지막에 삽입하면 되니까 push메소드 호출하면됨
3. 만약 0이랑 같으면 unshift 메소드활용
4. get메소드에 index-1로 호출함
5. 새로운 노드를 생성해야함.
6. 이전 노드의 next가 새로 삽입된 노드를 가리키도록 해야함 - 잠시동안 연결점을 저장해두는 변수 필요
7. 길이를 1만큼 증가
8. true 반환


🖊 19.16 단일 연결 리스트 : remove 메소드 소개
🖊 19.17 단일 연결 리스트 : remove 메소드 솔루션

인덱스를 인자로 받아 해당 인덱스 노드를 제거하고 주위것들을 연결

[의사 코드]
1. 인데스를 인자로 받는 펑션을 찾고, 인덱스 값이 0보다 작거나 혹은 리스트 길이보다 클 경우 undefined를 반환
2. 만일 인덱스가 length-1과 같을 경우 pop메소드를 호출
3. 만일 인덱스가 0이라면 shift
4. 둘다 아니라면 get 메소드를 사용해서 index-1를 호출하기
5. next를 이전 노드의 next로 설정
6. 리스트 길이를 감소시키고
7. 제거된 노드를 반환



🖊 19.18 단일 연결 리스트 : reverse 메소드 소개
🖊 19.19 단일 연결 리스트 : reverse 메소드 솔루션

주어진 연결 리스트의 노드 순서가 역으로 연결되도록

[의사 코드]
1. head와 tail을 바꾼다
2. next라는 변수를 선언
3. prev라는 변수생성
4. node 혹은 current 변수를 생성하고 현재의 헤드값으로 초기화한다
5. 리스트를 루프한다.
6. 현재 node의 next를 node의 next.next로 설정 반복
7. 현재 node의 next를 이전에 바로 앞에 있던 노드를 가리키도록 설정
8. 마지막으로 현재 node 값을 prev에 저장하고 node 병수의 next값을 저장한다


🖊 19.20 단일 연결 리스트 : 빅오 복잡도

삽입 - O(1)
제거 - O(1) or O(N)
검색 - O(N)
접근 - O(N)


🧢 Recap
1. 삽입작업과 리스트 맨 앞 노드의 제거 작업 등이 빈번하게 사용될 경우, 단방향 연결 리스트는 어레이의 훌륭한 대안이 될 수 있다.
2. 어레이는 내장된 인덱스를 가지고 있는 반면, 단방향 연결 리스트는 그렇지 않음
3. 단방향 구조의 데이터 구조는 스택이나 큐와같은 다른 데이터 구조들의 기초가 됨


📍P.S.
백준의 알고리즘 문제를 풀기위해 처음 이 강의를 듣기 시작한다고 했는데, 나도 모르는새 자료구조까지 들어와버렸다.
나중에 알고리즘 풀때 도움이 어떻게든 되지 않을까 생각을 하면서 일단 강의를 계속해서 듣는당.
사실 어려운만큼 이해했을때 오는 쾌감이 너무 크다.


🏷 Tags
#유데미 #유데미코리아 #스타트위드유데미 #스터디윗미 #코딩공부 #코딩 #유데미강의 #알고리즘 #자바스크립트 #개발자취업 #startwithudemy

