중급 정렬 알고리즘의 시작 합병정렬. 점점 각 섹션마다의 길이가 길어지고 이해하기 어려운 부분들이 증가한다. 수업을 최대한 컨디션 좋을때 듣고 나중에 복습을 피곤할때 하는 방향으로 해야겠다.

🖋 15. 합병 정렬

🖊 15.1 기가 막히게 빠른 정렬 소개

중급 정렬 알고리즘으로 넘어옴

코드 작성보다 작동방식에 집중해서 원리를 이해하는것이 중요한 파트임.
연구자들이 시험하여 만든 알고리즘이기 때문에 쉽게 이해하고 바로 구현하기란 쉬운일이 아니다.

[목표]
지금까지 배운 알고리즘의 한계를 깨닳는것
지금까지 배운 알고리즘은 큰 규모에 알맞지 않음

지금부터 배울 합병정렬은 시간 복잡도를 O(N^2)에서 O(N logN)으로 향상시킬 수 있다.
하지만 효율성과 단순성은 상충된다. 코드가 더 길거나 길진 않더라도 복잡하고 이상하고 심지어 알고리즘은 어렵다.

🖊 15.2 합병 정렬 : 소개

합병, 정렬, 분할이라는 세가지 요소를 가지고 만드는 알고리즘이다.
배열을 더 작은 배열로 나누는 방식 그리고 나서 다시 합병.

🖊 15.3 배열 합병 소개

우선 두개의 정렬된 배열을 활용해 진행함

[합병 배열]
1. 정렬된 두 배열 합병을 담당할 함수를 먼저 구현
2. 정렬된 두 배열이 주어지면 헬퍼 함수는 마찬가지로 정렬된 새 배열을 만듦
3. O(N+M)의 시간으로 이루어짐. N 첫번째 배열 크기 M 두번째 배열의 크기 -> 즉 시간 복잡도가 O(N)이라는거니까 각 배열의 각 항목에 대해 한번씩 반복하는 것이란 뜻이다.

[의사 코드]

1. 빈 배열을 만들어 입력(input) 두 개를 취하는 함수를 정의하고, 마지막 반환에 빈 배열을 만듦 각 입력 배열에서 가장 작은 값부터 시작 => while루프가 좋음
2. i j가 각각의 배열에 끝까지 도달하지 않았다면, 첫번째 배열 값으로 첫번째 항목을 취한다음 두번째 배열의 첫번째 값과 비교
- 첫 번째 항목지 작다면 결과 배열에 집어 넣은 다음 첫번째 배열의 다음 항목으로 넘어감
- 만약에 첫 번째가 더 크다면 두번째 배열의 값을 넣고 두번째 배열의 다음 값으로 넘어감
- 배열 하나를 완료한 다음에 남은 나머지 배열의 값을 다 넣음

배열들은 오름차순 내림차순 같은 타입으로 정렬되어있어야함

🖊 15.4 합병 정렬 : 구현

합병 정렬을 하는 알고리즘은 어렵지 않았음
세개의 while구문을 활용해 기능에 집중해 알고리즘을 구현했음.

🖊 15.5 합병 정렬 작성하기 1부

대부분의 합병 정렬은 재귀를 이용한다.
1. 목표는 배열을 계속 반으로 나누는 것임. - slice() 함수가 사용하기 좋다
[slice(a,b) a,b는 선택이 아니며 a에는 시작 인덱스, b에는 끝-1 인덱스가 들어감]
2. 작성해 놓았던 합병함수를 이용해서 다시 합친다. 전체 배열 길이로 돌아갈때까지 반복
3. 다시 합쳤다면 가장 마지막에 합병된 배열을 반환한다.

🖊 15.6 합병 정렬 작성하기 2부

거미다리처럼 굉장히 복잡하다.
재귀함수가 들어가는데 그렇다보니 구현의 방향을 보면,
초등학생 시절 짝사랑 하던 소녀의 이름 써놓고 획수에 따라서 그녀와 내가 몇퍼센트의 사랑을 이루는지 계산하는것만 같은 느낌이 든다.

🖊 15.7 합병 정렬을 위한 빅오 복잡도

합병정렬에서는 최적 평균 나쁜 케이스가 전부 O(N logN) 이다.
합병정렬은 예외케이스가 없음

[O(N logN)의 도출 이유]
두 부분으로 계속해서 나누니까 우선 O(logN)의 속도를 가짐
각 분할마다 합병할때 O(N) 번 비교하니까 둘을 곱한 속도가 되는것임.

데이터에 구애받지 않는 가장 좋은 것은 O(N logN)이다.

공간 복잡도는 O(N)
배열이 클수록 많은 공간을 사용하기 때문

📍P.S.
삽입정렬보다 사실 더 쉬웠던것 같다. 지수정렬까지 한번에 듣고 정리하려고 했으나, 생각보다 각 수업의 길이가 길어서 지금부터는 거의 섹션마다 정리를 하고 넘어가야 할 것 같다.

🏷 Tags
#유데미 #유데미코리아 #스타트위드유데미 #스터디윗미 #코딩공부 #코딩 #유데미강의 #알고리즘 #자바스크립트 #개발자취업 #startwithudemy #공스타 #공스타맞팔 #선팔맞팔 #공부기록 #공부일기 #개발공부