TIL (Today I Learned)

📚 공부타입(강의)
￼

JavaScript 알고리즘 & 자료구조 마스터 클래스

📖 공부내용
* Section 29 - 동적 프로그래밍

220502 | ccamanglab









마지막 주제인 동적프로그래밍! 말 그대로 동적으로 뭔갈 컴퓨터로 만드는건가? 하고 생각했는데 도입부분만 보고 이 프로그래밍의 원천이 보통 생각하는 프로그래밍이 아님을 알았다.
알고리즘에서도 많이 본 주제라 아주 흥미롭게 수업을 시작했다.


🖋 29 동적 프로그래밍


🖊 29.1 동적 프로그래밍 소개

기본적인 부분만 공부진행.
재귀에 대해서 편안해져야 가능함.

[다이나믹 프로그래밍]
복잡한 문제를 단순한 샘플러로 쪼갠 후, 그 작은 문제들을 풀어나가는 방식


🖊 29.2 중복되는 부분 문제

동적 프로그래밍이 되기 위해 확인해야할 조건
1. 최적 부분 구조가 존재하는지
2. 반복되는 하위 분제가 있는지

[반복되는 하위구조]
문제에 어떤 방식으로든 중첩되는 하위 문제들이 있어야한다.
한 문제를 더 작은 문제들로 나눌 수 있고, 그 조각들 중 일부가 재활용 가능하다는 뜻

ex) 피보나치 수열, 앞뒤가 똑같은 머지


🖊 29.3 최적 부분 구조

[최적 부분 구조]
하위 문제의 최적 해답을 통해서 더 큰 범주의 문제의 최적 해답을 구성할 수 있는 경우

ex) 피보나치 수열, 그래프 최소 경로 찾기


🖊 29.4 재귀적 솔루션 작성

피보나치 함수를 재귀 솔루션으로 작성했고, 그냥 재귀함수 부분과 똑같은 내용이였다.


🖊 29.5 우리 솔루션의 시간 복잡도

O(2^N)가 나올정도로 아주아주 나쁜 시간 복잡도를 가진다.


🖊 29.6 우리 솔루션의 문제점

문제점은 작업을 계속해서 반복하는 것 - 똑같은 것을 여기저기서 반복해야한다.
=> 만약 계산을 했던 값들을 기억할 수 있다면? ⭐️


🖊 29.7 Memo에 값을 저장하는 방법 소개

[MEMOIZATION]
보통 배열이나 객체인 데이터로 저장할 구조를 만든 다음, 시간이 오래 걸리는 함수를 실행.
다음번에 같은 호출이있으면 모든 작업을 하는 대신에 테이블이나 배열을 확인하면서 그 수가 있는지 확인하는것.


🖊 29.8 Memo에 값을 기록하는 솔루션의 시간 복잡도

O(N)의 시간 복잡도를 가짐
트리상으로 볼때 한줄만 쭉 계산하면 되니까


🖊 29.9 타뷸레이션Tabulation : 상향식 접근

이번에는 bottom-up방식의 문제해결

[타뷸레이션]
보통은 루프와 같이 순환을 통해서 작업을 진행
맨 밑바닥에서 작업을 시작
가장 작은 하위 문제를 푼 다음 그 결과를 테이블에 저장함.
배열에 데이터를 저장하고 루프를 돌면서 앞으로 나아가면서 덧셈을 진행함.


📍P.S.
모든 강의가 끝나고 이제 문제 풀이만이 남았다. 문제는 백준과 같이 병행해나가면서 조금씩 스스로 풀 예정이다. 답을 보고 풀기엔 너무 아깝다.
마지막 강의인 동적 프로그래밍이 엄청 대단한 것일까 하고 기대했는데 생각보다 쉬운 내용이였고, 아무래도 기초적인 내용만 다루고 넘어가서 그런것 같다.
우선 이렇게 스타트위드 유데미를 통한 매일매일 강의 듣기 챌린지는 1일 1강의 그리고 1게시글 이상으로 아주 성공적으로 마무리한다!


🏷 Tags
#유데미 #유데미코리아 #스타트위드유데미 #스터디윗미 #코딩공부 #코딩 #유데미강의 #알고리즘 #자바스크립트 #개발자취업 #startwithudemy


