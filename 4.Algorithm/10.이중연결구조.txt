우선 이중 연결리스트의 문제 부분을 제외한 강의를 완료. 문제부분은 내가 코드를 쳤던것과 동일해서 나중에 까먹었을 만할때 시험삼아 풀어볼것이다.


🖋 20 이중 연결 리스트

🖊 20.1 이중 연결 리스트 소개

앞의 노드로 갈 수 있는 포인터를 하나 더 더함(메모리 소모 +)


🖊 20.2 Node class 셋업하기

Node class에 prev를 추가


🖊 20.3,4 Push 메소드, 솔루션

1. 추가할 새로운 노드를 만들기
2. 헤드가 null인지 길이가 0인지 확인하기, 만약 비어있다면 만드는게 새로운 노드고 이런 경우 prev나 next가 없음
3. 리스트에 무언가 있다면 현제 테일을 찾아 next 프로퍼티를 새로운 노드로 설정
4. 새로 만든 노드의 prev프로퍼티를 예전 테일로 설정
5. 테일 프로퍼티를 새로운 노드로 변경
6. 길이를 +1
7. 리스트 리턴


🖊 20.5,6 Pop 메소드, 솔루션

[의사 코드]
1. 테일이 없다면 즉 비어있다면 undefinde 리턴
2. 테일을 나중에 출력 할 수 있도록 변수에 저장
3. 만약 길이가 1이라면 헤드와 테일 둘 다 null이 되도록 설정
4. 테일이 그 전에 있는 노드가 되도록 설정, 테일이 예전테일의 prev가 됨 - 마지막 요소의 prev에도 null
5. 새로운 테일의 next를 null로 바꿈
6. 길이 -1
7. 제거된 것 리턴


🖊 20.7,8 Shift 메소드, 솔루션

1. 길이가 0인지 헤드 없는지 확인해서 undefind 출력
2. 현재 헤드 프로퍼티를 old헤드라고 저장해두기 - 리턴위해
3. 만약 길이가 1이라면 헤드와 테일을 널로
4. 그렇지 않다며 헤드가 예전 헤드의 next가 되도록
5. 헤드의 prev를 널로 설정
6. 예전 헤드의 next를 null로
7. 길이 -1
8. 변경값 리턴


🖊 20.9,10 Unshift 메소드,솔루션

1. 입력된 값을 가지는 새로운 노드를 만듦
2. 만약 길이가 0이라면 헤드와 테일이 모두 새로운 노드가 되도록
3. 그렇지 않으면 레드의 prev가 새로운 노드가 되고 새로운 노드의 next가 현재의 헤드가 되도록 마지막으로 헤드가 새로운 노드의 헤드가 되도록
4. 길이 +1
5. 리스트 리턴


🖊 20.11,12 Get 메소드, 솔루션

1. 만약 인덱스가 음수거나 길이보다 같거나 크다면 널 출력
2. 인덱스 <= 리스트길이/2
- 만약 참이라면 0부터 next해가면서 진행
3. 만약 크다면
- 테일부터 시작해서 카운터에서 1을 빼줌
4. 리턴


🖊 20.13,14 Set 메소드, 솔루션

1. 함수에 입력된 인덱스 값을 넣은 get 메소드의 결과값을 받는 변수를 만들어준다. - 만약 나오면 true 안나오면 false출력
2. 찾은 노드의 val값을 넣는 val값으로 변경


🖊 20.15,16 Insert 메소드, 솔루션

1. 인덱스 유효성 평가 너무 작거나 같거나 크다면 false 리턴
2. 인덱스와 길이가 같다면 push
3. 인덱스 0 이라면 unshift
4. get 메소드 사용해서 우리가 삽입하려고 하는 바로 앞의값 찾기
5. next prev 이용해서 잘 연결
6. 길이 +
7. true 리턴


🖊 20.17,18 Remove 메소드, 솔루션

1. 인덱스 유효 확인 reutrn undefinded
2. 인덱스 0이면 shift
3. 인덱스 length-1 => pop
4. get메소드 활용해서 해당 요소를 찾아 제거
5. next와 prev요소들을 제거하고 업데이트
6. 찾아낸 노드의 next와 prev를 없애서 출력할 준비
7. 길이 -1
8. 리턴


🖊 20.19 단일 연결 리스트와 이중 연결 리스트 비교


삽입 - O(1) [동일]
제거 - O(1) [차이]
검색 - O(N)
접근 - O(N)

기술적 O(N/2)이지만 still 한다면 O(N)


🧢 Recap
1. 이중 연결 리스트는 그 전에 있는 노드를 가리키는 포인터가 하나 더 있다는 점만 빼면 단일 연결 리스트와 동일(뒤로가기 앞으로가기 브라우저)
2. 무언가를 찾는데 시간이 절약된다
3. 메모리를 더 소모하는 약점이 있다
 

📍P.S.
자고 일어나서 아침에 다시 자료구조보니까 전부 이해되서 신기하다.


🏷 Tags
#유데미 #유데미코리아 #스타트위드유데미 #스터디윗미 #코딩공부 #코딩 #유데미강의 #알고리즘 #자바스크립트 #개발자취업 #startwithudemy